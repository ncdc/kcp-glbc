name: e2e

on:
  pull_request:
    branches:
      - main
      - 'release-*'
    paths-ignore:
      - '**.adoc'
      - '**.md'
      - 'samples/**'
      - 'config/deploy**'
      - 'config/grafana**'
      - 'config/kcp**'
      - 'config/observability**'
      - 'config/prometheus**'
      - 'utils/**.sh'
      - 'LICENSE'
  push:
    branches:
      - main
      - 'release-*'
    paths-ignore:
      - '**.adoc'
      - '**.md'
      - 'samples/**'
      - 'config/deploy**'
      - 'config/grafana**'
      - 'config/kcp**'
      - 'config/observability**'
      - 'config/prometheus**'
      - 'utils/**.sh'
      - 'LICENSE'

concurrency:
  group: ${{ github.head_ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  kubernetes:

    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cleanup
        run: |
          ls -lart
          echo "Initial status:"
          df -h

          echo "Cleaning up resources:"
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          docker rmi $(docker image ls -aq)

          echo "Final status:"
          df -h
      - name: Set Go
        uses: actions/setup-go@v2
        with:
          go-version: v1.18
      - name: Get Kind version
        run: |
          KIND_VERSION=$(cat Makefile | grep "KIND_VERSION ?=" | awk '{print $3}')
          echo "KIND_VERSION=${KIND_VERSION}" >> $GITHUB_ENV
          echo ${KIND_VERSION}
      - name: Kubernetes KinD ingress Cluster
        uses: helm/kind-action@v1.2.0
        with:
          cluster_name: kcp-ingress-cluster
          node_image: kindest/node:v1.21.1@sha256:fae9a58f17f18f06aeac9772ca8b5ac680ebbed985e266f711d936e91d113bad
          version: ${{ env.KIND_VERSION }}
          config: ./test/e2e/kind-ingress.yaml
      - name: Kubernetes KinD Routes Cluster
        uses: helm/kind-action@v1.2.0
        with:
          cluster_name: kcp-routes-cluster
          node_image: kindest/node:v1.21.1@sha256:fae9a58f17f18f06aeac9772ca8b5ac680ebbed985e266f711d936e91d113bad
          version: ${{ env.KIND_VERSION }}
          config: ./test/e2e/kind-routes.yaml
      - name: Info
        run: |
          echo "Ingress Cluster:"
          kubectl --context kind-kcp-ingress-cluster cluster-info
          kubectl --context kind-kcp-ingress-cluster describe nodes

          echo "Routes Cluster:"
          kubectl --context kind-kcp-routes-cluster cluster-info
          kubectl --context kind-kcp-routes-cluster describe nodes
      - name: Run GLBC and KCP
        run: |
          echo "Building KCP"
          make kcp

          echo "Building GLBC"
          make build

          TEMP_DIR="$(pwd)/tmp"
          mkdir -p "${TEMP_DIR}"

          make kustomize
          make helm

          echo "Deploying Ingress controller to KinD workload clusters"
          VERSION=controller-v1.2.1

          kubectl config use-context kind-kcp-ingress-cluster
          curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/"${VERSION}"/deploy/static/provider/kind/deploy.yaml | sed "s/--publish-status-address=localhost/--report-node-internal-ip-address/g" | kubectl apply -f -
          kubectl annotate ingressclass nginx "ingressclass.kubernetes.io/is-default-class=true"
          kubectl -n ingress-nginx wait --timeout=300s --for=condition=Available deployments --all

          kubectl config use-context kind-kcp-routes-cluster
          kubectl apply -f https://raw.githubusercontent.com/openshift/router/master/deploy/route_crd.yaml
          kubectl apply -f https://raw.githubusercontent.com/openshift/router/master/deploy/router_rbac.yaml
          kubectl create namespace openshift-ingress -o yaml --dry-run=client | kubectl apply -f -
          kubectl apply -f https://raw.githubusercontent.com/openshift/router/master/deploy/router.yaml
          kubectl -n openshift-ingress wait --timeout=300s --for=condition=Available deployments --all
    
          KCP_LOG_FILE="${TEMP_DIR}"/kcp.log
          echo "KCP_LOG_FILE=${KCP_LOG_FILE}" >> $GITHUB_ENV
          echo "Starting KCP, sending logs to ${KCP_LOG_FILE}"
          ./bin/kcp start --run-controllers > ${KCP_LOG_FILE} 2>&1 &
          KCP_PID=$!
          echo "KCP_PID=${KCP_PID}" >> $GITHUB_ENV

          echo "Waiting 30 seconds..."
          sleep 30

          if ! ps -p ${KCP_PID}; then
            echo "KCP failed to start, see ${KCP_LOG_FILE} for info."
            exit 1
          fi

          GLBC_DEPLOYMENTS_DIR=config/deploy
          KUSTOMIZATION_DIR=${GLBC_DEPLOYMENTS_DIR}/local
          SYNC_TARGETS_DIR=${GLBC_DEPLOYMENTS_DIR}/sync-targets

          KUBECONFIG=.kcp/admin.kubeconfig ./bin/kubectl-kcp workspace use "root"
          KUBECONFIG=.kcp/admin.kubeconfig ./bin/kubectl-kcp workspace create "kuadrant" --type universal --enter

          echo "Setup workspace root:kuadrant"
          KUBECONFIG=.kcp/admin.kubeconfig ./utils/deploy.sh -s kcp-ingress-cluster -k ${KUSTOMIZATION_DIR} -c "none"

          echo "Applying syncer to the GLBC physical cluster"
          kubectl config use-context kind-kcp-ingress-cluster
          kubectl apply -f ${SYNC_TARGETS_DIR}/kcp-ingress-cluster-syncer.yaml

          echo "Checking glbc synctarget is ready"
          KUBECONFIG=.kcp/admin.kubeconfig kubectl wait --timeout=300s --for=condition=Ready=true synctargets "kcp-ingress-cluster"

          echo "Create User sync targets"
          export KCP_SYNCER_IMAGE=ghcr.io/kcp-dev/kcp/syncer:release-0.9
          KUBECONFIG=.kcp/admin.kubeconfig ./bin/kubectl-kcp workload sync kcp-ingress-cluster --kcp-namespace kcp-syncer --syncer-image=${KCP_SYNCER_IMAGE} --resources=ingresses.networking.k8s.io,services --output-file ${SYNC_TARGETS_DIR}/kcp-ingress-cluster-syncer.yaml
          KUBECONFIG=.kcp/admin.kubeconfig ./bin/kubectl-kcp workload sync kcp-routes-cluster --kcp-namespace kcp-syncer --syncer-image=${KCP_SYNCER_IMAGE} --resources=routes.route.openshift.io,services --output-file ${SYNC_TARGETS_DIR}/kcp-routes-cluster-syncer.yaml

          echo "Create placements and locations"
          KUBECONFIG=.kcp/admin.kubeconfig  kubectl apply -f ./config/deploy/local/locations_and_placements.yaml
          
          echo "Apply placement labels"
          KUBECONFIG=.kcp/admin.kubeconfig kubectl label --overwrite synctarget kcp-ingress-cluster kuadrant.dev/cluster-type=glbc-ingresses
          KUBECONFIG=.kcp/admin.kubeconfig kubectl label --overwrite synctarget kcp-routes-cluster kuadrant.dev/cluster-type=glbc-routes
          
          echo "Enabling advanced scheduling on user sync targets"
          KUBECONFIG=.kcp/admin.kubeconfig kubectl annotate --overwrite synctarget kcp-ingress-cluster featuregates.experimental.workload.kcp.dev/advancedscheduling='true'
          KUBECONFIG=.kcp/admin.kubeconfig kubectl annotate --overwrite synctarget kcp-routes-cluster featuregates.experimental.workload.kcp.dev/advancedscheduling='true'
          
          echo "Applying syncers to the user physical clusters"
          kubectl --context kind-kcp-ingress-cluster apply -f ${SYNC_TARGETS_DIR}/kcp-ingress-cluster-syncer.yaml
          
          sed -i '/^  - routes$/a \ \ - routes/custom-host' ${SYNC_TARGETS_DIR}/kcp-routes-cluster-syncer.yaml
          kubectl --context kind-kcp-routes-cluster apply -f ${SYNC_TARGETS_DIR}/kcp-routes-cluster-syncer.yaml

          echo "Checking all user synctargets are ready"
          KUBECONFIG=.kcp/admin.kubeconfig kubectl wait --timeout=300s --for=condition=Ready=true synctargets kcp-ingress-cluster kcp-routes-cluster

          echo "Check synctargets"
          KUBECONFIG=.kcp/admin.kubeconfig kubectl get synctargets kcp-ingress-cluster -o json
          KUBECONFIG=.kcp/admin.kubeconfig kubectl get synctargets kcp-routes-cluster -o json
          
          echo "Check placements"
          KUBECONFIG=.kcp/admin.kubeconfig kubectl get placement glbc-ingresses -o yaml
          KUBECONFIG=.kcp/admin.kubeconfig kubectl get placement glbc-routes -o yaml
          
          echo "Check locations"
          KUBECONFIG=.kcp/admin.kubeconfig kubectl get location glbc-ingresses -o yaml
          KUBECONFIG=.kcp/admin.kubeconfig kubectl get location glbc-routes -o yaml
          
          echo "Create the GLBC APIExport after all the clusters have synced and deploy GLBC components (cert-manager)"
          KUBECONFIG=.kcp/admin.kubeconfig ./utils/deploy.sh -k ${KUSTOMIZATION_DIR} -c "cert-manager"

          echo "Create the kcp-glbc namespace, kcp-glbc-controller-manager service account and generate a kubeconfig for access"
          KUBECONFIG=.kcp/admin.kubeconfig ./utils/create_glbc_kubeconfig.sh -o ${TEMP_DIR}/kcp.kubeconfig

          echo "Check GLBC APIExport and APIBinding"
          KUBECONFIG=.kcp/admin.kubeconfig kubectl get apiexports "glbc-root-kuadrant" -o json > glbc-root-kuadrant-apiexport.json
          KUBECONFIG=.kcp/admin.kubeconfig kubectl get apibindings glbc -o json > glbc-root-kuadrant-apibinding.json

          cat glbc-root-kuadrant-apiexport.json
          cat glbc-root-kuadrant-apibinding.json

          glbcurl=$(KUBECONFIG=.kcp/admin.kubeconfig kubectl get apiexport glbc-root-kuadrant -o json | jq -r .status.virtualWorkspaces[0].url)
          echo ${glbcurl}
          KUBECONFIG=.kcp/admin.kubeconfig kubectl --server ${glbcurl}/clusters/* api-resources

          echo "Create the default glbc-ca issuer"
          go run ./utils/certman-issuer/ --output-file ${TEMP_DIR}/issuer.yaml
          KUBECONFIG=.kcp/admin.kubeconfig kubectl apply -n kcp-glbc -f ${TEMP_DIR}/issuer.yaml

          echo "Export GLBC CI Cluster Config Enviornment"
          export $(cat ./config/deploy/local/kcp-glbc/controller-config.env.ci | xargs)

          GLBC_LOG_FILE="${TEMP_DIR}"/glbc.log
          echo "GLBC_LOG_FILE=${GLBC_LOG_FILE}" >> $GITHUB_ENV

          echo "Starting GLBC, sending logs to ${GLBC_LOG_FILE}"
          KUBECONFIG=${TEMP_DIR}/kcp.kubeconfig ./bin/kcp-glbc --zap-log-level=3 > ${GLBC_LOG_FILE} 2>&1 &
          GLBC_PID=$!
          echo "GLBC_PID=${GLBC_PID}" >> $GITHUB_ENV

          echo "Waiting 15 seconds..."
          sleep 15

          if ! ps -p ${GLBC_PID}; then
            echo "GLBC failed to start, see ${GLBC_LOG_FILE} for info."
            exit 1
          fi

          KUBECONFIG=.kcp/admin.kubeconfig kubectl label namespace default experimental.workload.kcp.dev/scheduling-disabled="true"
          KUBECONFIG=.kcp/admin.kubeconfig kubectl annotate namespace default scheduling.kcp.dev/placement-

      - name: Run e2e tests
        run: |
          export KUBECONFIG="$(pwd)"/.kcp/admin.kubeconfig
          echo "Exporting KUBECONFIG=${KUBECONFIG}"

          export CLUSTERS_KUBECONFIG_DIR="$(pwd)/tmp"
          mkdir -p "${CLUSTERS_KUBECONFIG_DIR}"
          echo "Exporting CLUSTERS_KUBECONFIG_DIR=${CLUSTERS_KUBECONFIG_DIR}"

          echo "Export GLBC CI Cluster Config Enviornment"
          export $(cat ./config/deploy/local/kcp-glbc/controller-config.env.ci | xargs)

          echo "Creating cluster kubeconfigs in ${CLUSTERS_KUBECONFIG_DIR}"
          kind get kubeconfig --name=kcp-ingress-cluster > "${CLUSTERS_KUBECONFIG_DIR}"/kcp-ingress-cluster.kubeconfig
          kind get kubeconfig --name=kcp-routes-cluster > "${CLUSTERS_KUBECONFIG_DIR}"/kcp-routes-cluster.kubeconfig

          # Then run e2e tests
          make e2e
      - name: Run smoke tests
        run: |
          export KUBECONFIG="$(pwd)"/.kcp/admin.kubeconfig
          echo "Exporting KUBECONFIG=${KUBECONFIG}"

          echo "Export GLBC CI Cluster Config Enviornment"
          export $(cat ./config/deploy/local/kcp-glbc/controller-config.env.ci | xargs)

          # Then run smoke tests
          make smoke
      - name: Run performance tests
        env:
          TEST_DNSRECORD_COUNT: 1
          TEST_INGRESS_COUNT: 1
          TEST_WORKSPACE_COUNT: 1
        run: |
          # Note: This doesn't really apply much load, but we run it here to ensure the tests are run on PRs
          export KUBECONFIG="$(pwd)"/.kcp/admin.kubeconfig
          echo "Exporting KUBECONFIG=${KUBECONFIG}"

          echo "Export GLBC CI Cluster Config Enviornment"
          export $(cat ./config/deploy/local/kcp-glbc/controller-config.env.ci | xargs)

          echo "TEST_INGRESS_COUNT = ${{ env.TEST_INGRESS_COUNT }}"
          echo "TEST_DNSRECORD_COUNT = ${{ env.TEST_DNSRECORD_COUNT }}"
          echo "TEST_WORKSPACE_COUNT = ${{ env.TEST_WORKSPACE_COUNT }}"

          kubectl config get-contexts

          # Then run performance tests
          make performance
      - name: Verify generated metrics documentation
        run: |
          make verify-gen-metrics-docs
      - name: Shutdown GLBC
        if: ${{ always() }}
        run: |
          echo "Kill GLBC process"
          kill ${{ env.GLBC_PID }}

          echo "Printing GLBC logs"
          cat ${{ env.GLBC_LOG_FILE }}
      - name: Shutdown KCP
        if: ${{ always() }}
        run: |
          echo "Kill KCP process"
          kill ${{ env.KCP_PID }}

          echo "Printing KCP logs"
          cat ${{ env.KCP_LOG_FILE }}
